include "global.tbh"

const DNS_STAMP="DNS> "
const DNS_CR_LF=chr(13)+chr(10)
const DNS_INIT_SIGNATURE=&hABAE
const DNS_QUERY_FLAG="0"		'message is a query
const DNS_RESPONSE_FLAG="1"		'message is a response
const DNS_OPCODE="0000"			'4-bits 0 statndard query, 1 inverse query, 2 server status request
const DNS_AA="0"				'authoritative answer, the server is authoritative for the domain in the question 
const DNS_TC="1"				'truncated, only keep first 512 bytes
const DNS_RD="1"				'0 iterative query(doesn't resolve by itself),1 recursive query (resolve by itself)
const DNS_RA="0"				'0 recursive not available, 1 recursive available (only matter in response )

const DNS_NUMBER_QUESTION=1
const DNS_QUERY_TYPE=1			'1 for IP Address ,2 for Name Server, 5 for Canonical name, 12 for pointer record, 13 for host info, 15 for mail exchange
const DNS_QUERY_CLASS=1			'1 for internet
const DNS_SERVER_PORT=53

const DNS_TX_BUF_SIZE=1
const DNS_RX_BUF_SIZE=2

dim dns_init_flag as word
dim dns_sock, dns_name_len as byte
dim dns_id as string(2)
dim dns_rpl_tmr as byte=0
dim dns_domain as string=""
dim dns_current_retries as byte=0


#if DNS_DEBUG_PRINT
declare sub dns_debug_print_status(status as en_dns_status_codes)
declare sub dns_debugprint(byref print_data as string)
#endif
'====================================================================

function dns_start(dns_sock_num as byte) as en_dns_status_codes
	dim x as byte

	#if DNS_DEBUG_PRINT
		dns_debugprint("---START---")
	#endif

	dns_start=EN_STATUS_DNS_OK
	
	if dns_init_flag=DNS_INIT_SIGNATURE then
		exit function
	end if

	if dns_sock_num>=sock.numofsock then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_INVALID_SOCKET)
		#endif
		dns_start=EN_STATUS_DNS_INVALID_SOCKET
		callback_dns_failure(EN_STATUS_DNS_INVALID_SOCKET)
		exit function
	end if
	
	if sys.freebuffpages<DNS_RX_BUF_SIZE+DNS_TX_BUF_SIZE then
		x=sys.freebuffpages-DNS_RX_BUF_SIZE-DNS_TX_BUF_SIZE
		callback_dns_pre_buffrq(x)
		if sys.freebuffpages<DNS_RX_BUF_SIZE+DNS_TX_BUF_SIZE then
			#if DNS_DEBUG_PRINT
				dns_debug_print_status(EN_STATUS_DNS_INSUFFICIENT_BUFFER_SPACE)
			#endif		
			dns_start=EN_STATUS_DNS_INSUFFICIENT_BUFFER_SPACE
			callback_dns_failure(EN_STATUS_DNS_INSUFFICIENT_BUFFER_SPACE)
			exit function
		end if
	end if

	dns_sock=dns_sock_num
	sock.num=dns_sock_num
	sock.txbuffrq(DNS_TX_BUF_SIZE)
	sock.rxbuffrq(DNS_RX_BUF_SIZE)
	sys.buffalloc
	sock.protocol=PL_SOCK_PROTOCOL_UDP
	sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
	sock.reconmode=PL_SOCK_RECONMODE_3

	dns_init_flag=DNS_INIT_SIGNATURE
end function

function dns_connect(interface as pl_sock_interfaces, byref dns_server_ip as string, dns_port as word) as en_dns_status_codes
	
	if dns_init_flag<>DNS_INIT_SIGNATURE then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_NOT_STARTED)
		#endif		
		callback_dns_failure(EN_STATUS_DNS_NOT_STARTED)
		dns_connect=EN_STATUS_DNS_NOT_STARTED
		exit function
	end if
	
	sock.num=dns_sock
	
	#if NET_AVAILABLE
		if interface=PL_SOCK_INTERFACE_NET then
			sock.targetinterface=PL_SOCK_INTERFACE_NET
			goto l1
		end if
	#endif
	
	#if WLN_AVAILABLE
		if interface=PL_SOCK_INTERFACE_WLN then
			sock.targetinterface=PL_SOCK_INTERFACE_WLN
			goto l1
		end if
	#endif

	#if CELLULAR_AVAILABLE
		if interface=PL_SOCK_INTERFACE_PPP then
			sock.targetinterface=PL_SOCK_INTERFACE_PPP
			goto l1
		end if
	#endif

	#if DNS_DEBUG_PRINT
		dns_debug_print_status(EN_STATUS_DNS_INVALID_INTERFACE)
	#endif
	
	dns_connect=EN_STATUS_DNS_INVALID_INTERFACE
	exit function 'invalid interface specified	
l1:	
	if dns_domain<>"" then
		dns_connect=EN_STATUS_DNS_REQUEST_IN_PROGRESS
		exit function
	end if
	
    if dns_server_ip<>"" then
        sock.targetip=dns_server_ip
    else
        sock.targetip=DNS_DEFAULT_SERVER
    end if
	
	if dns_port=0 then
		sock.targetport=DNS_SERVER_PORT
	else
		sock.targetport=dns_port
	end if	
	
	#if DNS_DEBUG_PRINT
		dim s as string
		dns_debugprint("conn to "+sock.targetip+":"+str(sock.targetport))
	#endif
	dns_connect=EN_STATUS_DNS_OK
	dns_current_retries=0
end function

sub dns_disconnect()
	if dns_init_flag<>DNS_INIT_SIGNATURE then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_NOT_STARTED)
		#endif		
		exit sub
	end if
	
	sock.num=dns_sock
	#if DNS_DEBUG_PRINT
		dns_debugprint("disc from "+sock.targetip+":"+str(sock.targetport))
	#endif
	dns_rpl_tmr=0
	dns_domain=""
	sock.rxclear()
	sock.close()	
end sub

sub dns_query(byref query_name as string)
	dim dns_query_question as string
	dim query_flag as word
	dim pos1, pos2, l as byte
	
	if dns_init_flag<>DNS_INIT_SIGNATURE then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_NOT_STARTED)
		#endif	
		callback_dns_failure(EN_STATUS_DNS_NOT_STARTED)
		exit sub
	end if
	
	dns_current_retries=dns_current_retries+1
	if dns_current_retries>DNS_MAX_RETRIES then
		callback_dns_failure(EN_STATUS_DNS_MAX_RETRIES_REACHED)
		dns_disconnect()
		exit sub
	end if
	#if DNS_DEBUG_PRINT
		if dns_current_retries > 1 then
			dns_debugprint("Retrying")
		end if
	#endif
	'generate an random id
	dns_id=random(2)
	
	'construct the flag
	query_flag=val("&b"+DNS_QUERY_FLAG+DNS_OPCODE+DNS_AA+DNS_TC+DNS_RD+DNS_RA+"0000000")
	
	dns_query_question=""
	pos1=0
	
	'convert query name
	do 
		pos2=pos1
		pos1=instr(pos1+1,query_name,".",1)
		if pos1>0 then
			l=pos1-pos2-1
		else
			l=len(query_name)-pos2
		end if
		dns_query_question=dns_query_question+chr(l)+mid(query_name,pos2+1,l)		
	loop while pos1>0
    dns_domain=query_name
	
	'end with chr(0)
	dns_query_question=dns_query_question+chr(0)
	
	'record the length of query name
	dns_name_len=len(dns_query_question)
	
	'query structure id(2)+flag(2)+number of question(2)+number of answer RRs(2)+number of authority RRs(2)+number of additional RRs(2)+query name(?)+query type(2)+query class(2)
	dns_query_question=dns_id+chr(query_flag/256)+chr(query_flag mod 256)+chr(DNS_NUMBER_QUESTION/256)+chr(DNS_NUMBER_QUESTION mod 256)+chr(0)+chr(0)+chr(0)+chr(0)+chr(0)+chr(0)+dns_query_question+chr(DNS_QUERY_TYPE/256)+chr(DNS_QUERY_TYPE mod 256)+chr(DNS_QUERY_CLASS/256)+chr(DNS_QUERY_CLASS mod 256)

	dns_rpl_tmr=DNS_REPLY_TIMEOUT
	sock.num=dns_sock
	sock.connect
	sock.setdata(dns_query_question)
	sock.send
	
end sub

sub dns_stop()
	#if DNS_DEBUG_PRINT
		if dns_init_flag<>DNS_INIT_SIGNATURE then
				dns_debug_print_status(EN_STATUS_DNS_NOT_STARTED)
			
			exit sub
		end if
	#endif	
	dns_disconnect()
	dns_init_flag=""
	'release dns port
	sock.num=dns_sock
	sock.discard()
	sock.txbuffrq(0)
	sock.rxbuffrq(0)
	sys.buffalloc
	callback_dns_buff_released()
	#if DNS_DEBUG_PRINT
		dns_debugprint("---STOP---")
	#endif	
end sub

sub dns_proc_data()
	dim s as string
	dim i,j as word
	dim number_answer as word
	dim answer_type as en_dns_return_type

	if sock.num<>dns_sock then exit sub

	if dns_init_flag<>DNS_INIT_SIGNATURE then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_NOT_STARTED)
		#endif	
		callback_dns_failure(EN_STATUS_DNS_NOT_STARTED)
		exit sub
	end if
		
	'compare id
	s=sock.getdata(2)
	if s<>dns_id then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_BAD_ANSWER)
		#endif	
		callback_dns_failure(EN_STATUS_DNS_BAD_ANSWER)
		exit sub
	end if
	
	'analysis flag
	s=sock.getdata(2)
	i=asc(left(s,1))*256+asc(right(s,1))
	s=bin(i)
	i=len(s)-2
	s=strgen(16-i,"0")+right(s,i)
	
	if left(s,1)<>DNS_RESPONSE_FLAG then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_BAD_ANSWER)
		#endif		
		callback_dns_failure(EN_STATUS_DNS_BAD_ANSWER)
		exit sub		
	end if
	
	if mid(s,9,1)=DNS_RA then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_RECURSIVE_UNAVALIABLE)
		#endif		
		callback_dns_failure(EN_STATUS_DNS_RECURSIVE_UNAVALIABLE)
		exit sub		
	end if
	
	s="&b"+right(s,4)
	if val(s)=3 then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_NAME_ERROR)
		#endif	
		callback_dns_failure(EN_STATUS_DNS_NAME_ERROR)
		exit sub
	end if
	
	'number of questions
	s=sock.getdata(2)
	
	'number of answers
	s=sock.getdata(2)
	number_answer=asc(left(s,1))*256+asc(right(s,1))
	if number_answer=0 then
		#if DNS_DEBUG_PRINT
			dns_debug_print_status(EN_STATUS_DNS_NO_ANSWER)
		#endif	
		callback_dns_failure(EN_STATUS_DNS_NO_ANSWER)
		exit sub
	end if
	
	'numer of authority RRs
	s=sock.getdata(2)
	
	'number of additional RRs
	s=sock.getdata(2)
	
	'question
	s=sock.getdata(dns_name_len)
	
	'query type for question
	s=sock.getdata(2)
	
	'query class for question
	s=sock.getdata(2)
	
	for j=1 to number_answer
		'determin if compress scheme is used
		s=sock.getdata(1)
		i=asc(s)
		if i<=63 then
			do
				s=sock.getdata(i)
				i=val(sock.getdata(1))
			loop while i>0
		else
			s=sock.getdata(1)
		end if

		'query type for answer
		s=sock.getdata(2)
		answer_type=asc(right(s,1))
		
		'query class for answer
		s=sock.getdata(2)

		'time to live
		s=sock.getdata(4)
		
		'resource data length
		s=sock.getdata(2)
		i=asc(left(s,1))*256+asc(right(s,1))
		
		'resource data
		s=sock.getdata(i)
		
		#if DNS_DEBUG_PRINT
			dim s1 as string
			select case answer_type
			case EN_DNS_RET_IP:
				s1="IP: "+ddstr(s)
			case EN_DNS_RET_NAME_SERVER:
				s1="NS: "+s
			case EN_DNS_RET_CANONICAL_NAME:
				s1="CNAME: "+s
			case EN_DNS_RET_POINTER_RECORD:
				s1="PTR: "+s
			case EN_DNS_RET_HOST_INFO:
				s1="HINFO: "+s
			case EN_DNS_RET_MAIL_EXCHANGE_SERVER:
				s1="MX: "+s
			end select
			dns_debugprint(s1)
		#endif
		
		callback_dns_answer_acquired(answer_type,s)
	next j
    
	callback_dns_ok()
	dns_disconnect()
end sub

public sub dns_proc_timer()
	if dns_init_flag<>DNS_INIT_SIGNATURE then exit sub
	sock.num=dns_sock
	if dns_rpl_tmr>0 then
		dns_rpl_tmr=dns_rpl_tmr-1
		if dns_rpl_tmr=0 then
			#if DNS_DEBUG_PRINT
				dns_debug_print_status(EN_STATUS_DNS_REPLY_TIMEOUT)
			#endif
			dns_query(dns_domain)
			exit sub
		end if
	end if	
end sub

function dns_current_domain() as string
    dns_current_domain=dns_domain
end function

#if DNS_DEBUG_PRINT
sub dns_debug_print_status(status as en_dns_status_codes)
	dim s as string(64)

	select case status
	case EN_STATUS_DNS_OK:
		exit sub
	case EN_STATUS_DNS_NOT_STARTED:
		s="dns_start() wasn't used or failed."
	case EN_STATUS_DNS_INVALID_SOCKET:
		s="Invalid socket."
	case EN_STATUS_DNS_INVALID_INTERFACE:
		s="Invalid interface."
	case EN_STATUS_DNS_INSUFFICIENT_BUFFER_SPACE:
		s="Insufficient buffer space."
	case EN_STATUS_DNS_CONNECTION_TIMEOUT:
		s="Unable to connect to the DNS server."
	case EN_STATUS_DNS_REPLY_TIMEOUT:
		s="Cannot get reply from DNS server."
	case EN_STATUS_DNS_RECURSIVE_UNAVALIABLE:
		s="Recursive query is unavliable for the destinated DNS server."
	case EN_STATUS_DNS_NAME_ERROR:
		s="Invalid domain name."
	case EN_STATUS_DNS_NO_ANSWER:
		s="There is no anwser for the domain name."
	case EN_STATUS_DNS_BAD_ANSWER:
		s="Unable to resolve the the answer from DNS server."
	end select
	dns_debugprint("ERROR: "+s)
end sub
#endif

#if DNS_DEBUG_PRINT
sub dns_debugprint(byref print_data as string)

	sys.debugprint(DNS_STAMP+print_data+DNS_CR_LF)
end sub
#endif