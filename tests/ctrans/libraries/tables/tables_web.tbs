
include "global.tbh"

dim tbl_web_enabled_tables(TBL_MAX_NUM_TABLES) as string(TBL_MAX_TABLE_NAME_LEN)
dim tbl_web_tbl_status as en_tbl_status_codes

sub tbl_web_start()
	dim i as byte
	for i=0 to TBL_MAX_NUM_TABLES-1
		tbl_web_enabled_tables(i)=""
	next i
end sub

sub tbl_web_set(byref tbl_name as string, tbl_enabled as no_yes)
	dim i as byte
	for i=0 to TBL_MAX_NUM_TABLES-1
		if tbl_enabled=YES and tbl_web_enabled_tables(i)="" then
			tbl_web_enabled_tables(i)=tbl_name
			exit sub
		else if tbl_enabled=NO and tbl_web_enabled_tables(i)=tbl_name then
			tbl_web_enabled_tables(i)=""
			exit sub
		end if
	next i
end sub


sub tbl_web_get_tables(byref selected_type as string)
	dim i,j as byte
	dim table_name as string(TBL_MAX_TABLE_NAME_LEN)
	dim html_tbl as tbl_type
	dim num_of_fld as byte
	dim tbl_rows as word
	dim table_type as string(5)="table"
	dim field_metadata as tbl_field_type
	
	if TBL_MAX_NUM_TABLES=0 then
		exit sub
	end if
	for i=0 to TBL_MAX_NUM_TABLES-1
		if tbl_web_enabled_tables(i)<>"" then
			table_name=tbl_web_enabled_tables(i)
			tbl_web_tbl_status=tbl_select(table_name,table_name)
			if tbl_web_tbl_status=EN_TBL_STATUS_OK then
				if tbl_get_table_info(table_name,html_tbl) = EN_TBL_STATUS_OK then
					if html_tbl.struct = EN_TBL_STRUCT_TABLE then
						table_type="table"
					else
						table_type="log"
					end if
					if selected_type = table_type then
						sock.setdata(table_name+"|")
						sock.setdata(table_type+"|")
						tbl_get_num_records(tbl_rows,NO)
						sock.setdata(str(tbl_rows)+"|")
						'fieldName|rowCount|column1|column2|....\r\n
						num_of_fld = tbl_get_num_fields(table_name)
						for j = 0 to num_of_fld-1
							tbl_get_field_info(table_name,j,field_metadata)
							sock.setdata(field_metadata.field_name+",")
							sock.setdata(chr(field_metadata.field_type)+",")
							sock.setdata(str(field_metadata.p1)+",")
							sock.setdata(str(field_metadata.p2)+",")
							sock.setdata(str(field_metadata.key)+",")
							sock.setdata(str(field_metadata.romaddr_def)+",")
							dim df as string
							tbl_get_field_def(table_name,field_metadata.field_name,df)
							sock.setdata(df)
							if j<num_of_fld-1 then
								sock.setdata("|")
							end if
							sock.send()
						next j
						sock.setdata("\r\n")
					end if
				end if
			end if
			
		end if
	next i
end sub

function tbl_web_get_url_params(byref http_req_string as string, byref argument as string) as string
	dim x, y as byte
	x = instr(1, http_req_string, argument+"=",1)
	if (x = 0) then
		tbl_web_get_url_params = ""
		exit function
	end if
	x = x + len(argument+"=")
	y = instr(x, http_req_string, "&",1)
	if (y = 0) then
		y = instr(x, http_req_string, " ",1)
		if (y = 0) then
			y = len(argument+"=")
		end if
	end if
	tbl_web_get_url_params = mid(http_req_string, x, y - x)
end function

sub tbl_web_get_rows(byref table as string)
	dim i as word
	dim j, num_of_fld as byte
	dim fld_data as string
	dim fld_name as string(TBL_MAX_FIELD_NAME_LEN)
	dim html_tbl as tbl_type
	dim tbl_rows, tbl_rows_all as word
	dim row_max as word
	dim field_metadata as tbl_field_type
	dim initialized as boolean=false
	dim fields(TBL_MAX_TOTAL_NUM_FIELDS) as string
	dim tmp_data as string=""
	
	tbl_select(table,table)
	
	if tbl_get_table_info(table,html_tbl) = EN_TBL_STATUS_OK then
		tbl_get_num_records(tbl_rows,NO)
		tbl_get_num_records(tbl_rows_all,YES)
		tmp_data=str(tbl_rows)+"\r\n"
		while sock.txfree < len(tmp_data)
			doevents
		wend
		sock.setdata(tmp_data)
		sock.send()
		row_max=tbl_rows_all
		if row_max > tbl_rows then
			row_max=tbl_rows
		end if
		
		num_of_fld = tbl_get_num_fields(table)
		
		if tbl_rows_all=0 then
			exit sub
		end if
		for i = 1 to tbl_rows_all
			if tbl_rows_all=0 then
				exit for
			end if
			if tbl_is_record_deleted(i)<>YES then
				tbl_record_sg(i,EN_TBL_GET)
				tmp_data=str(i)+","
				for j = 0 to num_of_fld - 1
					if initialized=false then
						tbl_get_field_info(table,j,field_metadata)
						fld_name = field_metadata.field_name
						fields(j)=fld_name
					end if
					tbl_field_sg(fields(j),fld_data,EN_TBL_GET)
					tmp_data=tmp_data+fld_data
					if j<num_of_fld - 1 then
						tmp_data=tmp_data+","
					else
						tmp_data=tmp_data+"\r\n"
					end if
					while sock.txfree < len(tmp_data)
						doevents
					wend
					sock.setdata(tmp_data)
					sock.send()
					tmp_data=""
				next j
				initialized=true
			end if
			
		next i
	end if
end sub

function tbl_web_add_row(byref table as string,byref row as string) as string
'field1,field2,field3,etc.
	dim html_tbl as tbl_type
	dim field_metadata as tbl_field_type
	dim i, j, pos1, pos2, num_of_fld as byte
	dim ts as struct_tbl_timestamp
	dim s as string
	dim error as string
	dim stemp as string(16)
	tbl_web_add_row=""

	tbl_select(table,table)
	tbl_web_tbl_status=tbl_get_table_info(table,html_tbl)
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		num_of_fld = tbl_get_num_fields(table)
		pos1=1
		for i = 0 to num_of_fld-1
			tbl_get_field_info(table,i,field_metadata)
'			if i>0 then
'				pos1=instr(pos1,row,",",i)
'			end if
			pos2=instr(pos1,row,",",1)
			s=mid(row,pos1,pos2-pos1)
			if s="" then 
				tbl_web_tbl_status = tbl_get_field_def(table,field_metadata.field_name,s)
				if tbl_web_tbl_status <> EN_TBL_STATUS_OK then goto verify
			end if
			tbl_web_tbl_status = tbl_field_sg(field_metadata.field_name,s,EN_TBL_SET)
			if tbl_web_tbl_status <> EN_TBL_STATUS_OK then goto verify
			pos1=pos2+1
		next i
		
		tbl_web_tbl_status=tbl_record_add(stemp)
	end if
	
verify:
	select case tbl_web_tbl_status
	case EN_TBL_STATUS_FULL: 
		error="Max record number reached or disk is full"
	case EN_TBL_STATUS_KEY_VIOLATION: 
		error="Key field violation"
	case EN_TBL_STATUS_INVALID: 
		error="Field value invalid"
	case EN_TBL_STATUS_OK:
		error=""
#if PLATFORM_ID <> EM500W AND PLATFORM_ID <> EM510W
		rtc.getdata(ts.ts_daycount,ts.ts_mincount,ts.ts_seconds)
#endif
		ts.ts_milsec=999
		tbl_timestamp_sg(ts,EN_TBL_SET)
	case else
		error=str(tbl_web_tbl_status)
	end select
	tbl_web_add_row=error
		
end function

function tbl_web_get_field_def(byref table_name_or_num as string, byref field_name as string) as string
	dim error as string=""
	dim def_value as string
	tbl_web_tbl_status=tbl_get_field_def(table_name_or_num, field_name, def_value)
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		tbl_web_get_field_def=def_value
	else
		select case tbl_web_tbl_status
		case EN_TBL_STATUS_INVALID: 
			error="Field value invalid"
		case else
			error=str(tbl_web_tbl_status)
		end select
		tbl_web_get_field_def=error
	end if
end function

function tbl_web_delete_row(byref table as string,row as word) as string
	dim html_tbl as tbl_type
	dim ts as struct_tbl_timestamp
	dim error as string=""
	dim stemp as string(16)

	tbl_select(table,table)
	tbl_web_tbl_status=tbl_get_table_info(table,html_tbl)
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		tbl_record_delete(row)
	end if
	

	select case tbl_web_tbl_status
	case EN_TBL_STATUS_FULL: 
		error="Max record number reached or disk is full"
	case EN_TBL_STATUS_KEY_VIOLATION: 
		error="Key field violation"
	case EN_TBL_STATUS_INVALID: 
		error="Field value invalid"
	case EN_TBL_STATUS_OK:
		error=""
#if PLATFORM_ID <> EM500W AND PLATFORM_ID <> EM510W
		rtc.getdata(ts.ts_daycount,ts.ts_mincount,ts.ts_seconds)
#endif
		ts.ts_milsec=999
		tbl_timestamp_sg(ts,EN_TBL_SET)
	case else
		error=str(tbl_web_tbl_status)
	end select
	tbl_web_delete_row=error
		
end function

function tbl_web_edit_row(byref table as string,byref index as word,byref row as string) as string
	'field1,field2,field3,etc.
	dim html_tbl as tbl_type
	dim field_metadata as tbl_field_type
	dim i, j, pos1, pos2, num_of_fld as byte
	dim ts as struct_tbl_timestamp
	dim s as string
	dim error as string
	dim stemp as string(16)
	tbl_web_edit_row=""

	tbl_select(table,table)
	tbl_web_tbl_status=tbl_get_table_info(table,html_tbl)
	if tbl_web_tbl_status=EN_TBL_STATUS_OK then
		num_of_fld = tbl_get_num_fields(table)
		pos1=1
		tbl_record_sg(index,EN_TBL_GET)
		for i = 0 to num_of_fld-1
			tbl_get_field_info(table,i,field_metadata)
'			if i>0 then
'				pos1=instr(pos1,row,",",i)
'			end if
			pos2=instr(pos1,row,",",1)
			s=mid(row,pos1,pos2-pos1)
			if s="" then 
				tbl_web_tbl_status = tbl_get_field_def(table,field_metadata.field_name,s)
				if tbl_web_tbl_status <> EN_TBL_STATUS_OK then goto verify
			end if
			tbl_web_tbl_status = tbl_field_sg(field_metadata.field_name,s,EN_TBL_SET)
			if tbl_web_tbl_status <> EN_TBL_STATUS_OK then goto verify
			pos1=pos2+1
		next i
		
		tbl_web_tbl_status=tbl_record_edit(index)
	end if
	
verify:
	select case tbl_web_tbl_status
	case EN_TBL_STATUS_FULL: 
		error="Max record number reached or disk is full"
	case EN_TBL_STATUS_KEY_VIOLATION: 
		error="Key field violation"
	case EN_TBL_STATUS_INVALID: 
		error="Field value invalid"
	case EN_TBL_STATUS_OK:
		error=""
#if PLATFORM_ID <> EM500W AND PLATFORM_ID <> EM510W
		rtc.getdata(ts.ts_daycount,ts.ts_mincount,ts.ts_seconds)
#endif		
		ts.ts_milsec=999
		tbl_timestamp_sg(ts,EN_TBL_SET)
	case else
		error=str(tbl_web_tbl_status)
	end select
	tbl_web_edit_row=error
end function

function tbl_web_clear_table(byref table as string) as string
	dim error as string
	
	tbl_select(table, table)
	tbl_web_tbl_status=tbl_clear()
	select case tbl_web_tbl_status
	case EN_TBL_STATUS_FULL: 
		error="Max record number reached or disk is full"
	case EN_TBL_STATUS_KEY_VIOLATION: 
		error="Key field violation"
	case EN_TBL_STATUS_INVALID: 
		error="Field value invalid"
	case EN_TBL_STATUS_OK:
		error=""
	case else
		error=str(tbl_web_tbl_status)
	end select
	tbl_web_clear_table=error

end function