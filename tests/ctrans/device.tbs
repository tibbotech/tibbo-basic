include "global.tbh"




function datetime_timestamp_mins(timestamp as dword) as dword
    dim days as word = 0
    dim mins as word = 0
    dim secs as byte = 0
    dim mins_offset as word=0
    datetime_from_timestamp(timestamp, days, mins, secs)
    td_get_tzone_offset(APP_TIMEZONE,mins_offset)
    datetime_timestamp_mins=mins+mins_offset
end function

function datetime_mins_to_timestamp(mins as word) as dword
    dim datetime_days,datetime_minutes as word
    dim datetime_secs as byte
    dim timestamp as dword=datetime_current_timestamp()
    datetime_from_timestamp(timestamp,datetime_days,datetime_minutes,datetime_secs)
    datetime_minutes=mins
    td_local_to_gmt(datetime_days,datetime_minutes,APP_TIMEZONE,PL_OFF)
    datetime_mins_to_timestamp=datetime_to_timestamp(datetime_days,datetime_minutes,0)
end function
            

sub callback_dhcp_ok(renew as no_yes, interface as pl_sock_interfaces, byref ip as string, byref gateway_ip as string, byref netmask as string, lease_time as dword)
    
end sub
        

sub callback_dhcp_failure(interface as pl_sock_interfaces,failure_code as en_dhcp_status_codes)
    
end sub
        

sub callback_dhcp_pre_clear_ip(interface as pl_sock_interfaces)
    
end sub
        

sub callback_dhcp_pre_buffrq(required_buff_pages as byte)
    
end sub
        
sub callback_dhcp_buff_released()
    
end sub
        

sub interface_set(interface as pl_sock_interfaces, state as no_yes)
    dim best_interface as pl_sock_interfaces=PL_SOCK_INTERFACE_NET
    if state = yes then
        interface_ready(interface) = yes
    else
        interface_ready(interface) = no
    end if
    if interface_ready(PL_SOCK_INTERFACE_NET) = yes then
        best_interface = PL_SOCK_INTERFACE_NET
    else
        
    end if
    
    change_current_interface(best_interface)
end sub


sub close_interface_sockets(interface as pl_sock_interfaces)
    dim f,sock_num_bup as byte
    dim i as word

    sock_num_bup=sock.num

    for f=0 to sock.numofsock-1
        sock.num=f
        if sock.targetinterface=interface then
            sock.close()
            sock.discard()
        end if
    next f

    i=sys.timercount

    wait_close_interface_sockets:
    for f=0 to sock.numofsock-1
        sock.num=f
        if sock.targetinterface=interface and sock.statesimple<>PL_SSTS_CLOSED and sys.timercount-i<5 and sys.timercount>=i then
            goto wait_close_interface_sockets
        end if
    next f

    sock.num=sock_num_bup

end sub
 

sub change_current_interface(new_interface as pl_sock_interfaces)
    if current_interface<>new_interface then
        
        
        sock.inconenabledmaster=NO
        close_interface_sockets(current_interface)

        current_interface=new_interface        
        
        select case current_interface
            case PL_SOCK_INTERFACE_NET: sys.debugprint("Set current interface to Ethernet\r\n") 
        
            case PL_SOCK_INTERFACE_WLN: sys.debugprint("Set current interface to Wi-Fi\r\n")
        
            case PL_SOCK_INTERFACE_PPP: sys.debugprint("Set current interface to GPRS\r\n")
        end select
        sock.inconenabledmaster=YES
        if new_interface <> PL_SOCK_INTERFACE_NULL then
            
        end if
    end if
end sub

sub on_firmware_update_start(byref current_fw_upg_state as pl_upg_state_t) 
    
end sub

sub on_firmware_update_data_received(byref current_fw_upg_state as pl_upg_state_t) 
    
end sub

sub on_firmware_update_percent_change(byref current_fw_upg_state as pl_upg_state_t) 
    
    sys.debugprint(str(current_fw_upg_state.fw_percent)+"%\r\n")
end sub

sub on_firmware_update_file_complete(byref current_fw_upg_state as pl_upg_state_t)
    
end sub

sub on_firmware_update_complete(byref current_fw_upg_state as pl_upg_state_t)
    
    sys.debugprint("All files have been downloaded.\r\n")
        
    dim i as integer
    dim module_type as pl_wln_module_types

        
    if current_fw_upg_state.fw_fail_reason <> PL_FW_FAIL_NONE then
        sys.debugprint("There was a failure return this to the browser.\r\n")
    end if

    sys.debugprint("All files have been downloaded.\r\n")

    if current_fw_upg_state.state <> PL_FW_UPG_COMPLETE then
        exit sub
    end if

    pat.play("B~", PL_PAT_CANINT)

    'i = get_firmware_index(WA2000_MON)
    'if i >= 0 then
    '   upgrade_WA2000_firmware(WA2000_MON, i)
    'end if

    i = get_firmware_index(WA2000_APP)

    i =  get_firmware_index(UNCOMPRESSED_TIOS_APP)  
    if i >= 0  then 
    fd.copyfirmware(current_fw_upg_state.fw_lengths(i)/256+1)
    end if

    i=  get_firmware_index(COMPRESSED_TIOS_APP) 
    if i >= 0  then 
        fd.copyfirmwarelzo(YES)
    end if

    i =  get_firmware_index(UNCOMPRESSED_TIOS)  
    if i >= 0  then 
        fd.copyfirmware(current_fw_upg_state.fw_lengths(i)/256+1)
    end if

    i =  get_firmware_index(TIOS_MON)  
    if i >= 0  then 
        'fd.copymonitor()
    end if

    sys.reboot()
end sub


function web_get_url_params(byref http_req_string as string, byref argument as string) as string
    dim x, y as byte
    x = instr(1, http_req_string, argument+"=",1)
    if (x = 0) then
    web_get_url_params = ""
        exit function
    end if
    x = x + len(argument+"=")
    y = instr(x, http_req_string, "&",1)
    if (y = 0) then
        y = instr(x, http_req_string, " ",1)
        if (y = 0) then
            y = len(argument+"=")
        end if
    end if
    web_get_url_params = mid(http_req_string, x, y - x)
end function

sub callback_tbl_error(status as en_tbl_status_codes)
    
end sub
        

function callback_tbl_fail_to_open(byref filename as string, status as pl_fd_status_codes, filenum as byte) as no_yes
    
end function
        

sub callback_tbl_field_error(byref file_name as string,byref field_name as string,tbl_result as en_tbl_status_codes)
    
end sub
        

sub callback_tbl_modified(byref file_name as string, modified_operation as en_tbl_modified_operation)
    
end sub
        

function tbl_record_find_sorted(
    record_type as en_tbl_record_states,                        'If the search includes the records that are marked as deleted.
    byref search_data as string,                                'Searching criteria data.
    byref field_name as string,                                 'Searching criteria name.
    byref rec_num as word,                                      'Starting record number, also returns the first found record number
    wraparound as boolean,                                      'Wrap around
    find_method as pl_fd_find_modes) as en_tbl_status_codes     'find method (equal, greater, lesser, etc.)
    
    rec_num=1
    dim should_exit as boolean=false
    dim num_records as word=0
    dim count as word = 0
    dim min as long=2147483647
    dim max as long=-2147483648
    tbl_get_num_records(num_records, no)
    if num_records=0 then
        rec_num=0
        exit function
    end if

    dim diff as long = 2147483647
    dim best_match as word = 0
    dim tmp_diff as word = 65535
    dim multiplier as char = 1
    dim search_val as real = lval(search_data)
    dim first as word = 0
    dim last as word = 0
    dim current_val as real
    select case find_method
    case PL_FD_FIND_GREATER,PL_FD_FIND_GREATER_EQUAL:
        multiplier=-1
    case PL_FD_FIND_LESSER,PL_FD_FIND_LESSER_EQUAL:
        multiplier=1
    end select
    best_match=0
    count=0
    dim tmp_rec as word=0
    while should_exit=false
        tmp_rec=tmp_rec+1
        rec_num=tmp_rec
        tbl_record_find(EN_TBL_RECORD_ACTIVE,search_data,field_name,rec_num,EN_TBL_SEARCH_DOWN,find_method)
        if rec_num=0 then
            tbl_record_sg(tmp_rec,EN_TBL_GET)
        else
            tbl_record_sg(rec_num,EN_TBL_GET)
            current_val = lval(tbl_field_get(field_name))
            tmp_diff = multiplier * (search_val - current_val)
            if tmp_diff < diff then
                best_match = rec_num
                diff = tmp_diff
            end if
        end if
        current_val = lval(tbl_field_get(field_name))
        if current_val > max then
            max=current_val
            last=tmp_rec
        end if
        if current_val < min then
            min = current_val
            first=tmp_rec
        end if
        
        count=count+1
        if count=num_records then
            should_exit=true
        end if
    wend
    if wraparound=true AND best_match=0 then
        select case find_method
        case PL_FD_FIND_GREATER,PL_FD_FIND_GREATER_EQUAL:
            best_match=first
        case PL_FD_FIND_LESSER,PL_FD_FIND_LESSER_EQUAL:
            best_match=last
        end select
    end if
    rec_num=best_match
end function
