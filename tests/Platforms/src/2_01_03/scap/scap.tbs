'***********************************************************************************************************
'			SCREEN CAPTURE LIBRARY
'***********************************************************************************************************

include "global.tbh"  

'--------------------------------------------------------------------------------
const SCAP_STAMP="SCAP> "
const SCAP_CR_LF=chr(13)+chr(10)
const SCAP_NUM_OF_SOCK=2

'--------------------------------------------------------------------------------
declare function scap_start() as en_scap_status_codes
declare sub scap_debugprint(data as string)

'================================================================================
public function scap_start() as en_scap_status_codes
'API procedure, starts the SCAP library.
	dim sock_num as byte

	scap_start=EN_SCAP_STATUS_OK

	#if SCAP_DEBUG_PRINT
		scap_debugprint("---START---")
	#endif

	dim f as byte
	for f = 1 to SCAP_NUM_OF_SOCK
		sock_num=sock_get("scap_sock"+str(f))
		if sock_num=255 then
			#if SCAP_DEBUG_PRINT
				scap_debugprint("Out of sockets")
			#endif
			scap_start=EN_SCAP_STATUS_OUT_OF_SOCKETS
			exit function
		end if
		sock.num=sock_num
		sock.protocol=PL_SOCK_PROTOCOL_TCP
		sock.httpportlist="80"
		sock.inconmode= PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
		sock.txbuffrq(SCAP_HTTP_TX_BUFF_PAGES/SCAP_NUM_OF_SOCK)
		sock.redir(PL_REDIR_SOCK0 + sock.num)
		sock.varbuffrq(SCAP_HTTP_VAR_BUFF_PAGES/SCAP_NUM_OF_SOCK)
	next f 
	sys.buffalloc()
	
	sock.urlsubstitutes = "scap_bmpfile.bmp"
end function

sub scap_capture(offsetX as word, offsetY as word, Xsize as word,Ysize as word)
	dim ly,lx as word
	dim pixel as dword
	dim limit as word
	dim tmp(3),pix_bit as byte
	dim pixels as string
	dim i as byte
	dim blue_mask as word = &hF800
	dim red_mask as word = &h1F
	dim green_mask as word = &h7E0
	dim red , green , blue,spare as byte
	dim red_value , green_value , blue_value as byte
	dim file_header,file_size,bmp_data_size as string
	dim data_size as dword
	
	data_size=0
	spare=0
	pix_bit=24
	limit = offsetY-1
	if ((lcd.width*3) mod 4) <> 0 then spare=(4-((lcd.width*3) mod 4))*lcd.height
	data_size = data_size + (lcd.width*3*lcd.height)+spare
	bmp_data_size= scap_size_convertion(data_size)
	
	file_size = chr(&h36)+chr(&h84)+chr(&h03)+chr(&h00)
	file_header="BM"+							'2 bytes 	
			file_size+							'4 bytes file size 		
			chr(0)+chr(0)+chr(0)+chr(0)+ 		'4 bytes reserved
			chr(&h36)+chr(0)+chr(0)+chr(0)+		'4 bytes	
'---------	bmp information header	--------------------total 40 bytes----
			chr(&h28)+chr(0)+chr(0)+chr(0)+		'4 bytes Bitmap Information Header Size
			chr(&h40)+chr(01)+chr(0)+chr(0)+	'4 bytes width
			chr(&hF0)+chr(0)+chr(0)+chr(0)+		'4 bytes height	
			chr(1)+chr(0)+						'2 bytes planes now is null
			chr(pix_bit)+chr(0)+				'2 bytes bit per pixel 
			chr(0)+chr(0)+chr(0)+chr(0)+		'4 bytes compression
			bmp_data_size+
			chr(0)+chr(0)+chr(0)+chr(0)+		'4 bytes Horizental Resolution
			chr(0)+chr(0)+chr(0)+chr(0)+		'4 bytes Vertical Resolution
			chr(0)+chr(1)+chr(0)+chr(0)+		'4 bytes Used Color
			chr(0)+chr(0)+chr(0)+chr(0) 		'4 bytes important Color
			
			sock.setdata(file_header)
			sock.send
	ly=Ysize-1
	do

		for  lx = offsetX to  Xsize -1
			
			pixel = lcd.getpixel(lx,ly)

			red_value = (pixel and red_mask)
			green_value = (pixel and green_mask) shr 5
			blue_value = (pixel and blue_mask) shr 11
			blue = blue_value  shl 3
			green = green_value shl 2 
			red =  red_value	shl 3
			tmp(0) = blue						
			tmp(1)=  green			
			tmp(2) = red					
			pixels=""
			for i = 0 to 2 
				pixels = pixels+chr(tmp(i))
			next i
								
			while sock.txfree < 4
				sock.send()
			wend
			sock.setdata(pixels)
			sock.send
			
		next lx
		ly=ly-1
	loop until ly=limit
	while sock.newtxlen <>0 
		sock.send
	wend 
end sub

function scap_size_convertion(v as dword) as string(4)
' convert parameter from dword to 4 bytes string
	dim d as string(10)
	dim p(8) as byte		'P() is &H 1xxxxxx8
	dim k,j,w as short
	dim q as byte
	
	d= lhex(v) 				'&H in front of data
	d = mid(d,3,len(d)-2)	'remove &H, rest part is value  
	k=len(d)				'length of d
	j=k
	w=k-1
	
	for q = 0 to w
		p(q)=asc(right(d,1))-48			' decimal of ASCII code "1" is 49-48= 1 
		if p(q) >16 then p(q)=p(q)-7	' decimal of ASCII code "A" is 65-48-7 =10 
		d= left(d,j-q-1)
	next q
	 
	if k=8 then goto next_size
	
	for q = k to 7  
		p(q)=0
	next q 
next_size:
	
	p(0)=p(0)+p(1)*16
	p(2)=p(2)+p(3)*16
	p(4)=p(4)+p(5)*16
	p(6)=p(6)+p(7)*16
	scap_size_convertion = chr(p(0))+chr(p(2))+chr(p(4))+chr(p(6))
	
end function		

#if SCAP_DEBUG_PRINT=1
sub scap_debugprint(data as string)
	sys.debugprint(SCAP_STAMP+data+SCAP_CR_LF)
end sub
#endif
