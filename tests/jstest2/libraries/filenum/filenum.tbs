'***********************************************************************************************************
'			FILE NUMBER ALLOCATION LIBRARY
'***********************************************************************************************************

include "global.tbh"

'--------------------------------------------------------------------
const FILENUM_STAMP="FILENUM> "
const FILENUM_CR_LF=chr(13)+chr(10)
const FILENUM_MAX_FILES=26
const FILENUM_UNUSED_SIGNATURE="----"
const FILENUM_INIT_SIGNATURE=&h39BD

'--------------------------------------------------------------------
declare sub filenum_init()
declare sub filenum_debugprint(byref print_data as string)

'--------------------------------------------------------------------
dim filenum_in_use(FILENUM_MAX_FILES) as no_yes
dim filenum_user_signature(FILENUM_MAX_FILES) as string(FILENUM_MAX_SIGNATURE_LEN)
dim filenum_filename(FILENUM_MAX_FILES) as string(FILENUM_MAX_FILENAME_LEN)
dim filenum_init_flag as word

#if FILENUM_DEBUG_PRINT
	dim filenum_do_not_debugprint as no_yes
#endif

'====================================================================
public function filenum_open(byref signature as string, byref filename as string, byref status as pl_fd_status_codes) as byte
	dim f as byte
	
	status=PL_FD_STATUS_OK

	if len(filename)>FILENUM_MAX_FILENAME_LEN then
		filenum_open=255
		status=PL_FD_STATUS_INV_PARAM
		#if FILENUM_DEBUG_PRINT
			filenum_debugprint("'"+signature+"' tried to open file '"+filename+"'. This name is "+str(len(filename))+" characters long and exceeds FILENUM_MAX_FILENAME_LEN (currently "+str(FILENUM_MAX_FILENAME_LEN)+").")
		#endif
		exit function
	end if
	
	'file already opened?
	for f=0 to FILENUM_MAX_FILES-1
		if filenum_in_use(f) then
			if filenum_filename(f)=filename then
				#if FILENUM_DEBUG_PRINT
					filenum_debugprint("'"+signature+"' tried to open file '"+filename+"'. This file is already opened on file number "+str(filenum_open)+".")
				#endif
				
				status=PL_FD_STATUS_OK
				filenum_open=f
				exit function
			end if
		end if
	next f
	
	'got free file numbers left?
	#if FILENUM_DEBUG_PRINT
		filenum_do_not_debugprint=YES
	#endif
	filenum_open=filenum_get(signature)
	#if FILENUM_DEBUG_PRINT
		filenum_do_not_debugprint=NO
	#endif
	if filenum_open>=FILENUM_MAX_FILES then
		#if FILENUM_DEBUG_PRINT
			filenum_debugprint("ERROR: '"+signature+"' tried to open file '"+filename+"'. No free file numbers left.")
		#endif
		exit function
	end if
	
	'disk ready?
	if fd.ready=NO then
		fd.mount
		if fd.laststatus<>PL_FD_STATUS_OK then goto filenum_opened_failed
	end if
	
	'can we open that file?
	fd.filenum=filenum_open
	fd.open(filename)
	if fd.laststatus<>PL_FD_STATUS_OK then
filenum_opened_failed:		
		#if FILENUM_DEBUG_PRINT
			filenum_debugprint("ERROR: '"+signature+"' failed to open file '"+filename+"' on file number "+str(filenum_open))
		#endif

		status=fd.laststatus
		#if FILENUM_DEBUG_PRINT
			filenum_do_not_debugprint=YES
		#endif
		filenum_release(filenum_open)
		#if FILENUM_DEBUG_PRINT
			filenum_do_not_debugprint=NO
		#endif
		filenum_open=255
		exit function
	end if

	filenum_filename(filenum_open)=filename

	#if FILENUM_DEBUG_PRINT
		filenum_debugprint("'"+signature+"' opened file '"+filename+"' on file number "+str(filenum_open))
	#endif

end function

'--------------------------------------------------------------------
public function filenum_get(byref signature as string) as byte
'find free file number or return 255 if no free file numbers available
	dim f as byte

	if filenum_init_flag<>FILENUM_INIT_SIGNATURE then
		filenum_init()
		filenum_init_flag=FILENUM_INIT_SIGNATURE
	end if
	
	for f=0 to FILENUM_MAX_FILES-1
		if filenum_in_use(f)=NO then
			filenum_in_use(f)=YES
			filenum_user_signature(f)=signature
			filenum_get=f
			#if FILENUM_DEBUG_PRINT
				filenum_debugprint("'"+filenum_user_signature(f)+"' got file number "+str(f))
			#endif
			exit function
		end if
	next f

	'no free file number found
	#if FILENUM_DEBUG_PRINT
		filenum_debugprint("'"+signature+"' could not get a file number: no free file numbers left")
	#endif
	filenum_get=255
end function

'--------------------------------------------------------------------
public function filenum_who_uses(file_num as byte) as string

	if filenum_init_flag<>FILENUM_INIT_SIGNATURE then
		filenum_init()
		filenum_init_flag=FILENUM_INIT_SIGNATURE
	end if

	if filenum_in_use(file_num)=NO then
		filenum_who_uses=FILENUM_UNUSED_SIGNATURE
	else
		filenum_who_uses=filenum_user_signature(file_num)
	end if
end function

'--------------------------------------------------------------------
public sub filenum_release(file_num as byte)
'cleans and releases the file number so it can be used for something else

	if filenum_init_flag<>FILENUM_INIT_SIGNATURE then
		filenum_init()
		filenum_init_flag=FILENUM_INIT_SIGNATURE
	end if

	'close the file
	fd.filenum=file_num
	fd.close
	
	#if FILENUM_DEBUG_PRINT
		filenum_debugprint("'"+filenum_user_signature(file_num)+"' released file number"+str(file_num))
	#endif
	
	filenum_in_use(file_num)=NO
	filenum_user_signature(file_num)=FILENUM_UNUSED_SIGNATURE
end sub

'------------------------------------------------------------------------------
sub filenum_init()
	dim f as byte
	
	for f=0 to FILENUM_MAX_FILES-1
		filenum_in_use(f)=NO
		filenum_user_signature(f)=FILENUM_UNUSED_SIGNATURE
	next f

	#if FILENUM_DEBUG_PRINT
		filenum_do_not_debugprint=NO
	#endif
end sub

'------------------------------------------------------------------------------
#if FILENUM_DEBUG_PRINT
sub filenum_debugprint(byref print_data as string)
	if filenum_do_not_debugprint=NO then
		sys.debugprint(FILENUM_STAMP+print_data+FILENUM_CR_LF)
	end if
end sub
#endif
