//***********************************************************************************************************
//			LUIS LIBRARY
//***********************************************************************************************************

#include "global.th"
#define WLN_RST 1
//--------------------------------------------------------------------------------
#define LUIS_STAMP "LUIS> "
#define LUIS_CR_LF chr(13)+chr(10)
#define LUIS_INIT_SIGNATURE 0xB5A4
#define LUIS_CMD_ESC_CHAR "@"
#define LUIS_PLACEHOLDER_STR "####"
#define LUIS_HTML_FILE "luis.html"
#define LUIS_STX 2
#define LUIS_CR 13
#define LUIS_MAX_BT_CMD_LEN 30
#define LUIS_MAX_BT_RPL_LEN 30

//State of html file sending
enum en_luis_html_send_states {
	EN_LUIS_HTML_GOP_RESULT,
	EN_LUIS_HTML_SEND_PART1,
	EN_LUIS_HTML_SEND_CONFIG,
	EN_LUIS_HTML_SEND_PART2
};

//--------------------------------------------------------------------------------
void luis_debugprint(string *print_data);
void luis_delay_ms(int delay);
string luis_dot_decimal_to_hex(string stored_mac);

//--------------------------------------------------------------------------------
unsigned int luis_init_flag;
string luis_GOP_result;
string luis_current_send_chunk;
unsigned long luis_html_placeholder_start;
unsigned long luis_html_placeholder_end;
unsigned long luis_html_read_pointer;
en_luis_html_send_states luis_html_send_state;

//================================================================================
en_luis_status_codes luis_start(string *bt_name) {
en_luis_status_codes luis_start;
	luis_start = EN_LUIS_STATUS_OK;
	if (luis_init_flag == LUIS_INIT_SIGNATURE) {
		return luis_start;
	}


	#if LUIS_DEBUG_PRINT
		luis_debugprint("---START---");
	#endif

	if (wln.enabled == NO) {
		wln.csmap = LUIS_BT_CS;
		io.num = LUIS_BT_CS;
		io.enabled = YES;
		wln.dimap = LUIS_BT_DI;
		wln.domap = LUIS_BT_DO;
		io.num = LUIS_BT_DO;
		io.enabled = YES;
		wln.clkmap = LUIS_BT_CLK;
		io.num = LUIS_BT_CLK;
		io.enabled = YES;
		io.num = LUIS_BT_RST;
		io.enabled = YES;
		wln.disable();

		io.num = LUIS_BT_RST;
		io.state = LOW;
		luis_delay_ms(1);
		io.state = HIGH;

		sys.buffalloc();

		wln.boot(0);
	} else {
		#if LUIS_DEBUG_PRINT
			luis_debugprint("WA2000 module already enabled");
		#endif
	}

	if (wln.enabled == NO) {
		#if LUIS_DEBUG_PRINT
			luis_debugprint("WA2000 module failed to start");
		#endif
		luis_init_flag = 0;
		luis_start = EN_LUIS_BT_FAILURE;
	} else {
		bt.name = *bt_name;
		bt.emulation = PL_WLN_BT_EMULATION_MODE_MICROCHIP;
		bt.txbuffrq(LUIS_BT_TX_BUF_SIZE);
		bt.rxbuffrq(LUIS_BT_RX_BUF_SIZE);
		sys.buffalloc();
		bt.enable();
	}

	romfile.open(LUIS_HTML_FILE);
	if (romfile.pointer32 != 1) {
		luis_start = EN_LUIS_FILE_HTML_ERROR;
		#if LUIS_DEBUG_PRINT
		luis_debugprint("Failed to open HTML file");
		#endif 
	}
	int html_size;
	romfile.open(LUIS_CONFIG_FILE);
	if (romfile.pointer32 != 1) {
		luis_start = EN_LUIS_FILE_CONFIG_ERROR;
		#if LUIS_DEBUG_PRINT
		luis_debugprint("Failed to open LUIS Library file");
		#endif
	}
	int config_size;
	LUIS_GOP_result = "{\x22type\x22:\x22spa\x22,\x22length\x22:"+lstr(html_size+config_size-len(LUIS_PLACEHOLDER_STR))+"}";

	if (luis_start == EN_LUIS_STATUS_OK) {
		luis_init_flag = LUIS_INIT_SIGNATURE;
	}

return luis_start;
}

void luis_on_bt_event(pl_bt_events bt_event) {
	if (luis_init_flag != LUIS_INIT_SIGNATURE || wln.enabled == NO) {
		return;
	}

	switch (bt_event) {

	case PL_BT_EVENT_CONNECTED:

		#if LUIS_DEBUG_PRINT
			luis_debugprint("Device connected");
		#endif
		callback_luis_bt_connected();
		break;
	case PL_BT_EVENT_DISCONNECTED:

		#if LUIS_DEBUG_PRINT
			luis_debugprint("Device disconnected");
		#endif
		callback_luis_bt_disconnected();
		break;
	case PL_BT_EVENT_ENABLED:

		#if LUIS_DEBUG_PRINT
			luis_debugprint("Bluetooth enabled");
			luis_debugprint("Connect to device named "+bt.name+" from the LUIS mobile app");
		#endif
		bt.advertise = YES;
		callback_luis_bt_enabled();
		break;
	case PL_BT_EVENT_DISABLED:

		#if LUIS_DEBUG_PRINT
			luis_debugprint("Bluetooth disabled");
		#endif
		luis_init_flag = 0;
		callback_luis_bt_disabled();
		break;
	}
}

void luis_on_bt_data_sent() {
	if (luis_init_flag != LUIS_INIT_SIGNATURE) {
		#if LUIS_DEBUG_PRINT
			luis_debugprint("got bluetooth data when LUIS not initialized");
		#endif
		return;
	}


	unsigned long chunk_size;

	if (len(luis_current_send_chunk) != 0 && bt.txfree-bt.newtxlen>=len(luis_current_send_chunk)) {
		bt.setdata(luis_current_send_chunk);
		bt.send();
	}

	switch (luis_html_send_state) {
	case EN_LUIS_HTML_GOP_RESULT:

		luis_html_send_state = EN_LUIS_HTML_SEND_PART1;
		romfile.open(LUIS_HTML_FILE);
		luis_html_placeholder_start = romfile.find32(0,LUIS_PLACEHOLDER_STR,0);
		luis_html_placeholder_end = luis_html_placeholder_start+len(LUIS_PLACEHOLDER_STR);
		luis_current_send_chunk = romfile.getdata(chunk_size);
		luis_html_read_pointer = romfile.pointer32;
		break;
	case EN_LUIS_HTML_SEND_PART1:

		romfile.open(LUIS_HTML_FILE);
		romfile.pointer32 = luis_html_read_pointer;
		if (luis_html_read_pointer+chunk_size>luis_html_placeholder_start) {
			chunk_size = luis_html_placeholder_start-luis_html_read_pointer;
			luis_html_send_state = EN_LUIS_HTML_SEND_CONFIG;
		}
		luis_current_send_chunk = romfile.getdata(chunk_size);
		if (luis_html_send_state != EN_LUIS_HTML_SEND_PART1) {
			luis_html_read_pointer = 1;
		} else {
			luis_html_read_pointer = romfile.pointer32;
		}
		break;
	case EN_LUIS_HTML_SEND_CONFIG:

		romfile.open(LUIS_CONFIG_FILE);
		romfile.pointer32 = luis_html_read_pointer;
		luis_current_send_chunk = romfile.getdata(chunk_size);
		luis_html_read_pointer = romfile.pointer32;
		if (luis_html_read_pointer>=romfile.size) {
			luis_html_send_state = EN_LUIS_HTML_SEND_PART2;
			luis_html_read_pointer = luis_html_placeholder_end;
		}
		break;
	case EN_LUIS_HTML_SEND_PART2:

		romfile.open(LUIS_HTML_FILE);
		romfile.pointer32 = luis_html_read_pointer;
		luis_current_send_chunk = romfile.getdata(chunk_size);
		luis_html_read_pointer = romfile.pointer32;
		break;
	}
	if (len(luis_current_send_chunk)>0) {
		bt.notifysent(bt.txbuffsize-len(luis_current_send_chunk));
	}

}

void luis_proc_bt_cmd(string *cmd_str) {
	string<LUIS_MAX_BT_RPL_LEN> reply_str;
	unsigned char x;
	string<STG_MAX_SETTING_NAME_LEN> setting_name;
	no_yes explicit_index;
	unsigned char index;
	string<64> s2;
	string<32> stg_data;
	explicit_index = NO;
	if (left(*cmd_str,1) != "D") {
		x = instr(1,*cmd_str,LUIS_CMD_ESC_CHAR,1);
		if (x>0) {
			//yes, the sequence is included -- extract it
			setting_name = mid(*cmd_str,2,x-2);
			stg_data = mid(*cmd_str,x+1,len(*cmd_str)-x);
			explicit_index = YES;
		}
	}


	unsigned char cs, f, pos;
	unsigned int mac_num;
	unsigned int i;

	switch (left(*cmd_str,1)) {

	case "G":
//get setting --------------------------------------
		setting_name = mid(*cmd_str,2,STG_MAX_SETTING_NAME_LEN);
		if (setting_name == "OP") {
			luis_html_send_state = EN_LUIS_HTML_GOP_RESULT;
			luis_current_send_chunk = luis_GOP_result;
			bt.notifysent(bt.txbuffsize-len(luis_current_send_chunk));
			return;
		}

		switch (stg_sg(setting_name,0,reply_str,EN_STG_GET)) {
		case EN_STG_STATUS_OK:

			goto reply_ok_have_data;
			break;
		case EN_STG_STATUS_UNKNOWN:

			goto reply_err;
			break;
		case EN_STG_STATUS_INVALID_INDEX:

			goto reply_err;
			break;
		default:
			goto reply_failed;break;
		}
		break;

	case "S":
//set setting --------------------------------------
		if (explicit_index == NO) {
			setting_name = mid(*cmd_str,2,2);
			stg_data = right(*cmd_str,len(*cmd_str)-3);
		}
		switch (stg_sg(setting_name,0,stg_data,EN_STG_SET)) {
		case EN_STG_STATUS_OK:

			goto reply_ok_have_data;
			break;
		case EN_STG_STATUS_INVALID:

			goto reply_err;
			break;
		case EN_STG_STATUS_INVALID_INDEX:

			goto reply_err;
			break;
		case EN_STG_STATUS_UNKNOWN:

			goto reply_err;
			break;
		default:
			goto reply_failed;break;
		}
		break;

	case "B":
//buzz the device ---------------------------------- 
		callback_luis_buzz_command();
		goto reply_ok;
		break;

	case "I":
//initialize settings --------------------------
		if (stg_restore_multiple(EN_STG_INIT_MODE_NORMAL) != EN_STG_STATUS_OK) { goto reply_failed;}
		goto reply_ok;
		break;

	case "E":
//reboot -------------------------------------------
		wln.disable();
		io.num = LUIS_BT_RST;
		io.state = LOW;
		sys.reboot();
		break;

	default:
		goto reply_err;break;

	}

reply_rejected: 
	reply_str = "R";
	goto send;

reply_err: 
	reply_str = "C";
	goto send;

reply_failed: 
	reply_str = "F";
	goto send;

reply_ok: 
	reply_str = "A";
	goto send;

reply_ok_have_data: 
	reply_str = "A"+reply_str;
	goto send;

send: 
	reply_str = chr(2)+reply_str+chr(13);//add encapsulation

	bt.setdata(reply_str);
	bt.send();

reply_null: 
}

en_luis_status_codes luis_on_bt_data_arrival() {
en_luis_status_codes luis_on_bt_data_arrival;
	unsigned char x, y;
	string<LUIS_MAX_BT_CMD_LEN> bt_cmd_str;
	luis_on_bt_data_arrival = EN_LUIS_STATUS_OK;

	if (luis_init_flag != LUIS_INIT_SIGNATURE) {
		luis_on_bt_data_arrival = EN_LUIS_STATUS_NOT_STARTED;
		return luis_on_bt_data_arrival;
	}

	bt_cmd_str = bt_cmd_str+bt.getdata(255-len(bt_cmd_str));

	x = instr(1,bt_cmd_str,chr(LUIS_STX),1);
	//this will prevent the string to overflow with garbage
	if (len(bt_cmd_str) == LUIS_MAX_BT_CMD_LEN) {
		y = instr(1,bt_cmd_str,chr(LUIS_CR),1);
		if (x == 0 || y == 0) {
			bt_cmd_str = "";
			return luis_on_bt_data_arrival;
		}
	}

	while (x != 0) {
		//we've got STX
		bt_cmd_str = right(bt_cmd_str,len(bt_cmd_str)+1-x);//cut out everything to the left of STX
		x = instr(1,bt_cmd_str,chr(LUIS_CR),1);//look for command end
		if (x == 0) { return luis_on_bt_data_arrival;}
		luis_proc_bt_cmd(mid(bt_cmd_str,2,x-2));
		bt_cmd_str = right(bt_cmd_str,len(bt_cmd_str)-x);
		x = instr(1,bt_cmd_str,chr(LUIS_STX),1);
	}
	return luis_on_bt_data_arrival;
}

#if LUIS_DEBUG_PRINT
void luis_debugprint(string *print_data) {
	sys.debugprint(LUIS_STAMP+*print_data+LUIS_CR_LF);
}
#endif

void luis_delay_ms(int delay) {
	unsigned long end_time;
	while (sys.timercountms<end_time) {
	}
}
